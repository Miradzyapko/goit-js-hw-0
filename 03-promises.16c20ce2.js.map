{"mappings":"oeAAAA,EAAA,S,iBAQA,MAAMC,EAAQC,SAASC,cAAc,uBAC9BC,EAAOF,SAASC,cAAc,sBAC7BE,EAASH,SAASC,cAAc,wBAuBxC,SAASG,EAAcC,EAAUC,GAC/B,MAAMC,EAAU,IAAIC,SAAQ,CAACC,EAASC,MAMxC,SAA+BL,EAAUM,EAAOF,EAASC,GACvDE,YAAW,KACaC,KAAKC,SAAW,GAEpCL,EAAQ,C,SAAEJ,EAAUU,MAAAJ,IAEpBD,EAAO,C,SAAEL,EAAUU,MAAAJ,GAAQ,GAE5BA,E,CAbDK,CAAsBX,EAAUC,EAAOG,EAASC,EAAO,IAEzD,OAAOH,C,CAaT,SAASU,GAAUZ,SAAEA,EAAUU,MAAAG,IAC7BC,EAAAC,OAAOC,QAAQ,qBAAqBhB,QAAea,M,CAGrD,SAASI,GAAQjB,SAAEA,EAAUU,MAAAQ,IAC3BJ,EAAAC,OAAOI,QAAQ,mBAAmBnB,QAAekB,M,CA5C/BvB,SAASC,cAAc,yBAOhCwB,iBAAiB,SAG5B,SAA4BC,GAC1BA,EAAMC,iBACN,MAAMC,EAAaC,OAAO9B,EAAM+B,OAC1BC,EAAYF,OAAO3B,EAAK4B,OACxBE,EAAkB7B,EAAO2B,MAC/B,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAiBC,GAAK,EACxC7B,EAAc,EAAI6B,EAAGL,EAAaK,EAAIF,GACnCG,MAAK,EAAC7B,SAAEA,EAAUU,MAAAoB,KAAYlB,EAAU,C,SAAEZ,EAAUU,MAAAoB,MACpDC,OAAM,EAAC/B,SAAEA,EAAUU,MAAAsB,KAAYf,EAAQ,C,SAAEjB,EAAUU,MAAAsB,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\n//\n\nconst delay = document.querySelector('input[name=\"delay\"]');\n const step = document.querySelector('input[name=\"step\"]');\n const  amount = document.querySelector('input[name=\"amount\"]');\n const btnPromise = document.querySelector('button[type=\"submit\"]');\n\n\n\n\n\n\nbtnPromise.addEventListener('click', startCreatePromise);\n\n\nfunction startCreatePromise(event) {\n  event.preventDefault();\n  const firstDelay = Number(delay.value);\n  const delayStep = Number(step.value);\n  const amountInputUser = amount.value;\n  for (let i = 0; i < amountInputUser; i += 1) {\n    createPromise(1 + i, firstDelay + i * delayStep)\n      .then(({ position, delay }) => onSuccess({ position, delay }))\n      .catch(({ position, delay }) => onError({ position, delay }));\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    getPromiseFromBackend(position, delay, resolve, reject);\n  });\n  return promise;\n}\n\nfunction getPromiseFromBackend(position, delay, resolve, reject) {\n  setTimeout(() => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  }, delay);\n}\nfunction onSuccess({ position, delay }) {\n  Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onError({ position, delay }) {\n  Notify.failure(`Rejcted promise ${position} in ${delay}ms`);\n}"],"names":["parcelRequire","$47d4ff9957288465$var$delay","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","promise","Promise","resolve","reject","delay4","setTimeout","Math","random","delay","$47d4ff9957288465$var$getPromiseFromBackend","$47d4ff9957288465$var$onSuccess","delay5","$iQIUW","Notify","success","$47d4ff9957288465$var$onError","delay6","failure","addEventListener","event","preventDefault","firstDelay","Number","value","delayStep","amountInputUser","i","then","delay1","catch","delay2"],"version":3,"file":"03-promises.16c20ce2.js.map"}