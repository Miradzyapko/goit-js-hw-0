{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAQA,IAAMC,EAAQC,SAASC,cAAc,uBAC9BC,EAAOF,SAASC,cAAc,sBAC7BE,EAASH,SAASC,cAAc,wBACjCG,EAAaJ,SAASC,cAAc,SAG3C,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WAELN,EACJI,EAAQ,CAAEN,WAAUS,MAAAR,IAElBM,EAAO,CAAEP,WAAUS,MAAAR,G,GAEpBA,E,IAZPS,QAAQC,IAAIb,GAmBZA,EAAWc,iBAAiB,UAG5B,SAA4BC,GAC3BA,EAAMC,iBAKL,IAHA,IAAIC,EAAaC,OAAOvB,EAAMwB,OAC1BC,EAAYF,OAAOpB,EAAKqB,OACxBE,EAAkBH,OAAOnB,EAAOoB,OAC5BG,EAAI,EAAGA,GAAKD,EAAiBC,GAAK,EACvCrB,EAAcqB,EAAGL,GACfM,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUuB,EAAKD,EAALb,MACjBe,EAAAjC,GAASkC,OAAOC,QAAQ,qBAAoCC,OAAf3B,EAAS,QAAY2B,OAANJ,EAAM,M,IAEnEK,OAAM,SAAAN,G,IAAGtB,EAAQsB,EAARtB,SAAU6B,EAAKP,EAALb,MAClBe,EAAAjC,GAASkC,OAAOK,QAAQ,mBAAkCH,OAAf3B,EAAS,QAAY2B,OAANE,EAAM,M,IAElE/B,EAAWiC,QACXhB,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\n//\n\nconst delay = document.querySelector('input[name=\"delay\"]');\n const step = document.querySelector('input[name=\"step\"]');\n const  amount = document.querySelector('input[name=\"amount\"]');\n const btnPromise = document.querySelector('.form');\nconsole.log(btnPromise);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => { \n    setTimeout(() => {\n      \n      if (shouldResolve) {\n      resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n    \n  }\n\n\n\nbtnPromise.addEventListener('submit', startCreatePromise);\n\n\nfunction startCreatePromise(event) {\n event.preventDefault();\n \n  let firstDelay = Number(delay.value);\n  let delayStep = Number(step.value);\n  let amountInputUser = Number(amount.value);\n  for(let i = 1; i <= amountInputUser; i += 1) {\n     createPromise(i, firstDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejcted promise ${position} in ${delay}ms`);\n      });\n      btnPromise.reset();\n      firstDelay += delayStep;\n  }\n}\n\n \n\n\n\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delay","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$btnPromise","$ce04d3a99e08e73b$var$createPromise","position","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","console","log","addEventListener","event","preventDefault","firstDelay","Number","value","delayStep","amountInputUser","i","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","reset"],"version":3,"file":"03-promises.686c10a6.js.map"}